version: '3.9'

services:
  web:
    container_name: web
    # Берем Dockerfile из каталога app
    build:
      context: ./PetProject2
      dockerfile: Dockerfile
    # Запускаем сервер gunicorn
    command: gunicorn mivainer_project.wsgi:application --bind 0.0.0.0:8000
    # Открываем порт 8000 внутри и снаружи
    expose:
      - 8000
    # Подключаем статические и медиа файлы
    volumes:
      - static_volume:/usr/src/APP/app1/static
      - media_volume:/usr/src/APP/app1/media
    env_file:
      - ./.env.dev
    # Дожидаемся запуска контейнера db
    depends_on:
      - db
  db:
    container_name: postgres
    # Образ и версия базы, которую мы будем использовать
    image: postgres:15.3-alpine
    # Внешний том(volume) и место где он будет подключен внутри контейнера
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    env_file:
      - ./.env.dev
  nginx:
    container_name: nginx
    build: ./nginx
    volumes:
      - static_volume:/usr/src/web/static
      - media_volume:/usr/src/web/media
      # файлы сертификата сгенерированного certbot лужат в этой директории, ссылка на них в nginx.conf
      - etc-letsencrypt:/etc/nginx/ssl
      # в этой директории лежат файлы certbot, ссылка на дирректорию в location nginx.conf
      - certbot:/var/www/certbot/
    ports:
      - 80:80
      - 443:443
    restart: always
    depends_on:
      - web
  certbot:
    image: certbot/certbot:latest
    depends_on:
      - nginx
    container_name: certbot
    volumes:
      - etc-letsencrypt:/etc/letsencrypt
      - certbot:/var/www/certbot/
    # команда для создания сертификатов
    command: certonly --webroot --webroot-path=/var/www/certbot/ --email cikulaevm6@gmail.com --agree-tos --no-eff-email -d mivainer-project.site

# Шарим тома между контейнерами
volumes:
  postgres_volume:
  static_volume:
  media_volume:
  etc-letsencrypt:
  certbot: